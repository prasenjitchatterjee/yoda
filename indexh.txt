<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>ChatBot</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="{{ url_for('static', filename='styles/style.css') }}">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
</head>

<body>
  <!-- partial:index.partial.html -->
  <section class="msger">
    <header class="msger-header">
      <div class="msger-header-title">
        <i class="fas fa-bug"></i> Chat Bot <i class="fas fa-bug"></i>
      </div>
    </header>

    <main class="msger-chat">
      <div class="msg left-msg">
        <div class="msg-img" style="background-image: url('static/images/bot.png')"></div>

        <div class="msg-bubble">
          <div class="msg-info">
            <div class="msg-info-name">ChatBot</div>
            <div class="msg-info-time"></div>
          </div>

          <div class="msg-text">
            Hi, welcome to ChatBot! Go ahead and send me a message. ðŸ˜„
          </div>
        </div>
      </div>

    </main>

    <form class="msger-inputarea">
      <input type="text" class="msger-input" id="textInput" placeholder="Enter your message...">
      <button type="submit" class="msger-send-btn">Send</button>
    </form>
  </section>
  <!-- partial -->
  <script src='https://use.fontawesome.com/releases/v5.0.13/js/all.js'></script>
  <script>

    const msgerForm = get(".msger-inputarea");
    const msgerInput = get(".msger-input");
    const msgerChat = get(".msger-chat");


    // Icons made by Freepik from www.flaticon.com
    const BOT_IMG = "static/images/bot.png";
    const PERSON_IMG = "static/images/icons8-person-94.png";
    const BOT_NAME = "ChatBot";
    const PERSON_NAME = "You";

    msgerForm.addEventListener("submit", event => {
      event.preventDefault();

      const msgText = msgerInput.value;
      if (!msgText) return;

      appendMessage(PERSON_NAME, PERSON_IMG, "right", msgText);
      msgerInput.value = "";
      botResponse(msgText);
      

    });

    function appendMessage(name, img, side, text) {
      const msgHTML = `
            <div class="msg ${side}-msg">
              <div class="msg-img" style="background-image: url(${img})"></div>

              <div class="msg-bubble">
                <div class="msg-info">
                  <div class="msg-info-name">${name}</div>
                  <div class="msg-info-time">${formatDate(new Date())}</div>
                </div>

                <div class="msg-text">${text}</div>
              </div>
            </div>
            `;

      msgerChat.insertAdjacentHTML("beforeend", msgHTML);
      msgerChat.scrollTop += 500;
    }

    function botResponse(rawText) {

      document.getElementById("textInput").disabled = true;

      s = `<div class="container">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
            </div>`
        appendMessage(BOT_NAME, BOT_IMG, "left", s);

      // Bot Response
      $.get("/get", { msg: rawText }).done(function (data) {
        // console.log(rawText);
        // console.log(data);
        const msgText = data;


       /* $(".msger-chat").children().last().fadeOut('slow',function(){
            $(this).remove();
          }); */
        
          $(".msger-chat").children().last().remove();
  
        appendMessage(BOT_NAME, BOT_IMG, "left", msgText);

        document.getElementById("textInput").disabled = false;

      });

    }


    // Utils
    function get(selector, root = document) {
      return root.querySelector(selector);
    }

    function formatDate(date) {
      const h = "0" + date.getHours();
      const m = "0" + date.getMinutes();

      return `${h.slice(-2)}:${m.slice(-2)}`;
    }


    let capturedPrompt = null; // Store the captured prompt

    // // Load the prompts content dynamically from the /get_prompts route
    // fetch('/get_prompts')
    //     .then(response => response.json())
    //     .then(prompts => {
    //         renderPrompts(prompts);
    //     })
    //     .catch(error => {
    //         console.error('Error loading prompts:', error);
    //     });

    
    // Render the prompts inside the container
function renderPrompts(prompts) {
    // Select all containers with the 'prompts-container' class
    const promptsContainers = document.querySelectorAll('.prompts-container');
    
    // Debugging: Ensure that promptsContainers are selected
    console.log("Selected containers:", promptsContainers);

    promptsContainers.forEach(promptsContainer => {
        // Debugging: Check if promptsContainer is a valid element
        console.log("Container:", promptsContainer);

        promptsContainer.innerHTML = ''; // Clear existing content for this container

        prompts.forEach(prompt => {
            const link = document.createElement('a');
            link.href = 'javascript:void(0);';
            link.classList.add('link');
            link.textContent = prompt;
            link.onclick = function() {
                console.log("Clicked container:", promptsContainer);  // Debugging line
                capturePrompt(prompt, promptsContainer); 
            };

            promptsContainer.appendChild(link);
        });
    });
}


// Capture the clicked prompt
function capturePrompt(promptText, clickedContainer) {
    // Debugging: Check if clickedContainer is correctly passed
    console.log("Captured container:", clickedContainer);  // Debugging line

    // Check if clickedContainer is valid (it must be a DOM element)
    if (!clickedContainer || !(clickedContainer instanceof HTMLElement)) {
        console.error("Invalid clicked container:", clickedContainer);  // Debugging line
        return;
    }

    // Disable all links within this specific container
    const links = clickedContainer.querySelectorAll('.link');
    
    // Check if links are found
    if (links.length === 0) {
        console.error("No links found in the container:", clickedContainer);  // Debugging line
        return;
    }

    links.forEach(link => {
        link.classList.add('disabled');
        link.onclick = function() { return false; }; // Disable click
    });

    // Highlight the clicked link within this specific container
    const clickedLink = Array.from(links).find(link => link.textContent === promptText);
    if (clickedLink) {
        clickedLink.classList.add('highlight');
    }

    // Change the container class to mark it as handled
    clickedContainer.classList.add('prompts-container-handled');

    // Capture the clicked prompt on the client side
    capturedPrompt = promptText;

    // Display the captured prompt in the page by selecting all elements with the class 'captured-prompt'
    const capturedPromptElements = document.querySelectorAll('.captured-prompt');
    capturedPromptElements.forEach(element => {
        element.textContent = capturedPrompt;
        // Change the class from 'captured-prompt' to 'captured-prompt-done'
        element.classList.replace('captured-prompt', 'captured-prompt-done');
    });

    // Log the captured prompt
    console.log('Captured prompt:', capturedPrompt);

    botResponse(capturedPrompt);
}
    
</script>


</body>

</html>
